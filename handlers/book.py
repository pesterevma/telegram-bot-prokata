from aiogram import types, Router, F
from aiogram.filters.text import Text
from create_bot import bot
from keyboards import kb_client, kb_client_ret, kb_book_1, kb_book_2, kb_book_3
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from configurebot import cfg
from datetime import datetime, timedelta
from pytz import timezone


class NegativeDateError(Exception):
    pass


class FSMbook(StatesGroup):
    step1 = State()
    step2 = State()
    step3 = State()
    step4 = State()
    step5 = State()
    step6 = State()
    step7 = State()
    step8 = State()
    step9 = State()


router = Router()
group_id = cfg['group_id']


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Text(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ignore_case=True))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_client)


@router.message(Text(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', ignore_case=True))
async def command_book(message: types.Message, state: FSMContext):
    await message.answer('''–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º, —Ç–æ <b>–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</b>. \
–ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç, —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç <b>–≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</b>''', parse_mode='HTML', reply_markup=kb_book_1)
    await state.set_state(FSMbook.step1)


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏
@router.message(FSMbook.step1, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
@router.message(FSMbook.step1)
async def book_step(message: types.Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await message.answer('–í—ã —Ä–∞–Ω—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫–∞—Ç–∞?', reply_markup=kb_book_2)
        await state.set_state(FSMbook.step2)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞/–Ω–µ—Ç –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
@router.message(FSMbook.step2)
async def book_step(message: types.Message, state: FSMContext):
    if message.text in ('–î–∞', '–ù–µ—Ç'):
        await state.update_data(user_id=message.chat.id)
        await state.update_data(old_client=message.text)
        await state.set_state(FSMbook.step3)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>',
                             parse_mode='HTML', reply_markup=kb_client_ret)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.')


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(FSMbook.step3, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>',
                         parse_mode='HTML')


# –ó–∞–ø—Ä–æ—Å –§–ò–û
@router.message(FSMbook.step3)
async def book_step(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ç–æ–≤–æ–≥–æ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>89827303231</b>', parse_mode='HTML')
    await state.set_state(FSMbook.step4)


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–æ—Ç–æ–≤–æ–≥–æ
@router.message(FSMbook.step4, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>89827303231</b>',
                         parse_mode='HTML')


# –ó–∞–ø—Ä–æ—Å —Å–æ—Ç–æ–≤–æ–≥–æ
@router.message(FSMbook.step4)
async def book_step(message: types.Message, state: FSMContext):
    if message.text.isdigit() and len(message.text) == 11:
        await state.update_data(phone=message.text)
        user_data = await state.get_data()
        if user_data['old_client'] == '–î–∞':
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(datetime.now(), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')
            await state.set_state(FSMbook.step6)
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ö—É–ª–∏–±–∏–Ω–∞, 1–∞, 100</b>', parse_mode='HTML')
            await state.set_state(FSMbook.step5)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>89827303231</b>',
                             parse_mode='HTML')


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@router.message(FSMbook.step5, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ö—É–ª–∏–±–∏–Ω–∞, 1–∞, 100</b>', parse_mode='HTML')


# –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
@router.message(FSMbook.step5)
async def book_step(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(datetime.now(), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')
    await state.set_state(FSMbook.step6)


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
@router.message(FSMbook.step6, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(datetime.now(), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')


# –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
@router.message(FSMbook.step6)
async def book_step(message: types.Message, state: FSMContext):
    try:
        start = datetime.strptime(message.text, '%d.%m.%y')
        now = datetime.now()
        if start.date() < now.date():
            raise NegativeDateError
        await state.update_data(start=start)
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(start + timedelta(1), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')
        await state.set_state(FSMbook.step7)
    except NegativeDateError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ üòî')
        await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(datetime.now(), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')
    except:
        await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(datetime.now(), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞
@router.message(FSMbook.step7, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    start = user_data['start']
    await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(start + timedelta(1), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')


# –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞
@router.message(FSMbook.step7)
async def book_step(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    start = user_data['start']
    try:
        end = datetime.strptime(message.text, '%d.%m.%y')
        if end.date() < start.date():
            raise NegativeDateError
        await state.update_data(end=end)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º <b>—Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> \
—Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤–∞–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ', parse_mode='HTML')
        await state.set_state(FSMbook.step8)
    except NegativeDateError:
        await message.answer('–î–∞—Ç–∞ —Å–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ üòî')
        await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(start + timedelta(1), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')
    except:
        await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, \
—Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É:\n<b>{datetime.strftime(start + timedelta(1), "%d.%m.%y")}</b> (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)', parse_mode='HTML')


# –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
@router.message(FSMbook.step8, F.content_type != 'text')
async def book_step(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º <b>—Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> \
—Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤–∞–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.', parse_mode='HTML')


# –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
@router.message(FSMbook.step8)
async def book_step(message: types.Message, state: FSMContext):
    await state.update_data(equip=message.text)
    user_data = await state.get_data()
    await message.answer('''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ <b>–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"</b>.
*–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.''', parse_mode='HTML')
    book = f'''
<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>   
<b>–§–ò–û:</b> {user_data['name']}
<b>–¢–µ–ª.:</b> {user_data['phone']}'''
    if user_data['old_client'] == '–ù–µ—Ç':
        book += f'''\n<b>–ê–¥—Ä–µ—Å:</b> {user_data['address']}'''
    book += f'''
<b>–î–∞—Ç—ã –ø—Ä–æ–∫–∞—Ç–∞:</b> {datetime.strftime(user_data['start'], "%d.%m.%y")} - {datetime.strftime(user_data['end'], "%d.%m.%y")}
<b>–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:</b> {user_data['equip']}'''
    await message.answer(book, parse_mode='HTML', reply_markup=kb_book_3)
    await state.set_state(FSMbook.step9)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
@router.message(FSMbook.step9)
async def book_step(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        user_data = await state.get_data()
        user_id = user_data['user_id']
        date = message.date
        date_ekb = date.astimezone(timezone('Asia/Yekaterinburg'))
        formatted_date = date_ekb.strftime("%d%H%M%S")
        number_b = f'b{str(message.chat.id)[-3:]}{formatted_date}'
        await bot.send_message(chat_id=user_id,
                               text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>#{number_b}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏—à–ª—ë—Ç –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.',
                               parse_mode='HTML', reply_markup=kb_client)
        book = f'''
<b>ID:</b> {user_data['user_id']}       
<b>–§–ò–û:</b> {user_data['name']}
<b>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:</b> {user_data['old_client']}
<b>–¢–µ–ª.:</b> {user_data['phone']}'''
        if user_data['old_client'] == '–ù–µ—Ç':
            book += f'''\n<b>–ê–¥—Ä–µ—Å:</b> {user_data['address']}'''
        book += f'''
<b>–î–∞—Ç—ã –ø—Ä–æ–∫–∞—Ç–∞:</b> {datetime.strftime(user_data['start'], "%d.%m.%y")} - {datetime.strftime(user_data['end'], "%d.%m.%y")}
<b>–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:</b> {user_data['equip']}'''
        # —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É", callback_data=f'b{user_data["user_id"]}'))
        builder.add(types.InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –õ–°", callback_data=f'ls{message.chat.id}_{number_b}'))

        await bot.send_message(chat_id=group_id, text=f"‚úâ | –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ <b>#{number_b}</b>:{book}",
                               parse_mode='HTML', reply_markup=builder.as_markup())
        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.')
